1.
Parallel GC - параллельный сборщик мусора

src/main/resources/Screenshots/ParGC -Сборка с момента запуска.jpg
С момента запуска программы в хип загрузилось чуть больше 6 мб. объектов. После этого произошла малая сборка,
используемый объем уменьшился до 3 мб.

src/main/resources/Screenshots/ParGC - объем int с момента запуска.jpg
Количество объектов int[] в куче с момента запуска программы.

src/main/resources/Screenshots/ParGC - создание массива, последующая сборка.jpg
Маленький зубец на графике - момент создания и заполнения массива. После этого происходит малая сборка, объем кучи с 6 мб
уменьшается уже до 4 мб, так как в памяти храниться массив.




src/main/resources/Screenshots/ParGC - запуск bubble sort.jpg
После запуска сортировки пузырьком минимумы и максимумы графика хип поднялись на величину еще одного массива в памяти.
При этом общее выделение памяти увеличилось не значительно, но значительно увеличилась нагрузка на ЦП.

src/main/resources/Screenshots/ParGC - объем int после запуска BubbleSort.jpg
Объем объектов int[] соответствует двум копиям массивов.

src/main/resources/Screenshots/ParGC - сборка после завершенияbubble sort.jpg
При выполнении сортировки пузырьком частота сборок увеличилась. Так же судя по наклону "зубцов" сборка в этот момент как
буд-то проводилась медленнее. Возможно это связано с другими процессами выполняемыми в это момент на машине. Но после
завершения. Так же странным выглядит уменьшение объема кучи  после завершения пузырьковой сортировки с 9 до 7 мб,
и следом после бльшой сборки с 7 до 5 мб. При повторном запуске программы это не наблюдалось, объем кучи ступенчато возрастал после каждой сортировки.


src/main/resources/Screenshots/ParGC - сборка после запуска сортировки вставкой.jpg
Запуск сортировки вставкой увеличил объем памяти на размер копии массива.

src/main/resources/Screenshots/ParGC - после заевршениясортировки слиянием.jpg
Запуск сортировки вставкой увеличил объем памяти на размер копии массива. При создании массива, происходит последующая
малая сборка, на графике появляется характерный малый "зубец" на теле большого "зубца".

src/main/resources/Screenshots/ParGC - загрузка ЦП.jpg
Видно что наибольшую нагрузку на процессор оказывает сортировка пузырьком, сортировка слиянием напротив наименее затратная.

2.
G1 GC - многопоточный параллельный сборщик мусора

src/main/resources/Screenshots/G1 GC - сборки с момента запуска.jpg
Сборка мусора с момента запуска. На графике видно что сборка осуществляется в несколько этапов, с меньшими паузами на
stop the world.

src/main/resources/Screenshots/G1 GC - объем занимаемой памяти типами с момента запуска.jpg
Объем занимаемый типом int[] около 400 килобайт.



src/main/resources/Screenshots/G1 GC - объем памяти типов после создания массива.jpg
Объем занимаемый типом int[] увеличился 1.3 мегабайта.

src/main/resources/Screenshots/G1 GC - график хип после создания массива.jpg
Создание массива на графике кучи так отображается характерной "ступенькой". После создания объем занимаемой памяти после
сборки увеличился до 5 мегабайт.

src/main/resources/Screenshots/G1 GC - загрузка цп большими сборками после заполнения массива.jpg
Видно что в отличии от предыдущих сборщиков, после заполнения массива при использовании G1 используется больше ресурсов
процессора при выполнении больших сборок.



src/main/resources/Screenshots/G1 GC - Хип при сортировке пузырьком.jpg
После запуска сортировки пузырьком, виден короткий всплеск объема занимаемой памяти до 7+ мегабайт, после которого была произведена сборка.
Минимальное значение увеличилось до 6 мегабайт. Так же видно что при выполнении сортировки,  объем освобождаемой памяти
существенно не изменялся до окончания работы алгоритма.

src/main/resources/Screenshots/G1 GC -  типы после сортировки пузырьком.jpg
После запуска сортировки пузырьком, объем занимаемый типом int[], продолжительно не увеличивается, в отличии от того как
это было при работе с последовательным и параллельным сборщиками.

src/main/resources/Screenshots/G1GC - загрузка цп сортировкой пузырьком.jpg
Видно что при пузырьковой сортировке активно задействую ресурсы процессора.



src/main/resources/Screenshots/G1 GC - хип при сортировка вставками .jpg
После запуска сортировки вставкой, так же виден короткий всплеск объема занимаемой памяти до 7+ мегабайт. После чего
происходит сборка, объем уменьшается до 6 мегабайт как и при работе с пузырьком.

src/main/resources/Screenshots/G1 GC - типы после сортировки вставками.jpg
После запуска сортировки вставкой, объем занимаемый типом int[], продолжительно не увеличивается, как и после запуска
сортировки пузырьком.

src/main/resources/Screenshots/G1 GC - цп при сортировке вставками.jpg
При сортировке вставкой максимальная загрузка цп была примерно такой же как и при использовании пузырька, но в при этом
была не продолжительной.



src/main/resources/Screenshots/G1 GC - хип после сортировки слиянием.jpg
После запуска сортировки слиянием, видно увеличение объема памяти до 8.5 мегабайт. После сборки объем уменьшается до 5.5.

src/main/resources/Screenshots/G1 GC  - типы после сортировки слиянием.jpg
После запуска сортировки слиянием, объем занимаемый типом int[], продолжительно не увеличивается, как и при предыдущих
сортировках. На основании этих наблюдений, предполагаю что G1 удаляет копии массива после завершения каждой сортировки.

src/main/resources/Screenshots/G1 GC - загрузка цп сортировкой слиянием.jpg
Сортировка слиянием использует значительно меньше ресурсов цп.



3.
ZGC - безостановочный сборщик.
src/main/resources/Screenshots/ZGZ - хип сборка мусора с момента запуска.jpg
Объем занимаемой памяти существенно выше, чем при использовании других сборщиков.
Большие сборки происходят реже.

src/main/resources/Screenshots/ZGC - типы после запуска программы.jpg
Объем типов int[] так же выше, чем при работе других сборщиков.



src/main/resources/Screenshots/ZGC - цп после запуска программы.jpg
Выделение памяти под массив существенно не выделяется, на фоне общего использования памяти сборщиком.

src/main/resources/Screenshots/ZGZ - типы после заполнения массива.jpg
Видно что после создания массива, объем типа int[] меньше чем с момента запуска программы.


src/main/resources/Screenshots/ZGC - хип сортировка пузырьком.jpg
Выделение памяти под копию массива сортировки пузырьком существенно не выделяется, на фоне общего использования памяти
сборщиком.

src/main/resources/Screenshots/ZGC - цп сортировка пузырьком.jpg
Использование цп аналогично другим сборщикам при пузырьковой сортировке.



src/main/resources/Screenshots/ZGC - типы сортировка вставкой.jpg
Видно что после создания копии массива сортировки вставкой, объем типа int[] меньше чем с момента запуска программы.

src/main/resources/Screenshots/ZGC - хип сортировка вставкой.jpg
Выделение памяти под копию массива сортировки вставкой существенно не выделяется, на фоне общего использования памяти
сборщиком.



src/main/resources/Screenshots/ZGC - хип сортировка слиянием.jpg
После запуски сортировки слиянием, объем памяти увеличился почти на 30 мегабайт. После этого произошла большая сборка.

src/main/resources/Screenshots/ZGC - цп сортировка слиянием.jpg
Использование цп не отличается от других кейсов.

src/main/resources/Screenshots/ZGC - сртировка слиянием.jpg
объем памяти типа int[] содержит изначальный массив, так как после завершения сортировки слиянием произошла большая сборка.

